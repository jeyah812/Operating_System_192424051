#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

sem_t chopstick[5];

void *philosopher(void *num) {
    int id = *(int *)num;
    printf("Philosopher %d is thinking\n", id);
    sem_wait(&chopstick[id]);
    sem_wait(&chopstick[(id + 1) % 5]);

    printf("Philosopher %d is eating\n", id);
    sleep(1);

    sem_post(&chopstick[id]);
    sem_post(&chopstick[(id + 1) % 5]);
    printf("Philosopher %d finished eating\n", id);
    return NULL;
}

int main() {
    pthread_t tid[5];
    int i, phil_id[5];

    for (i = 0; i < 5; i++)
        sem_init(&chopstick[i], 0, 1);

    for (i = 0; i < 5; i++) {
        phil_id[i] = i;
        pthread_create(&tid[i], NULL, philosopher, &phil_id[i]);
    }

    for (i = 0; i < 5; i++)
        pthread_join(tid[i], NULL);

    return 0;
}
OUTPUT:
Philosopher 0 is thinking
Philosopher 1 is thinking
...
Philosopher 2 is eating
Philosopher 2 finished eating
...
